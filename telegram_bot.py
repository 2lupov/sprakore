import telebot
from telebot import types
import re
import logging

TOKEN = '6279188443:AAEd-J_iclFx_418W20S-7t0PCGM3aprLQA'
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = '5109895086'  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à Telegram ID
AUTHORIZED_USERS = set()

logging.basicConfig(filename='bot_log.log', level=logging.INFO, format='%(asctime)s - %(message)s')

materials = {
    '–ù—ñ–º–µ—Ü—å–∫–∞': {
        '–°–µ—Ä–µ–¥–Ω—ñ–π': '/root/languages/Grammatik_aktiv_B1.pdf'
    }
}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è InlineKeyboardMarkup –¥–ª—è –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é
    materials_button = types.InlineKeyboardButton(text='–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏', callback_data='materials')
    register_button = types.InlineKeyboardButton(text='–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='register')
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–æ –º–µ–Ω—é
    markup.add(materials_button, register_button)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
    bot.send_message(message.chat.id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!", reply_markup=markup)

@bot.message_handler(commands=['register'])
def register(message):
    choose_language(message)

@bot.message_handler(commands=['authorize'])
def authorize_user(message):
    if str(message.from_user.id) == ADMIN_ID:
        parts = message.text.split()
        if len(parts) > 1:
            user_id = parts[1]
            AUTHORIZED_USERS.add(user_id)
            bot.send_message(ADMIN_ID, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.")
        else:
            bot.send_message(ADMIN_ID, "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é.")

@bot.message_handler(commands=['materials'])
def materials_handler(message):
    if str(message.from_user.id) not in AUTHORIZED_USERS:
        bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–ù—ñ–º–µ—Ü—å–∫–∞', '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞', '–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞', '–ù–æ—Ä–≤–µ–∑—å–∫–∞')
    msg = bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_level)

def choose_language(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('üá©üá™ –ù—ñ–º–µ—Ü—å–∫–∞', 'üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞', 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞', 'üá≥üá¥ –ù–æ—Ä–≤–µ–∑—å–∫–∞')
    msg = bot.send_message(message.chat.id, "–Ø–∫—É –º–æ–≤—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–≤—á–∞—Ç–∏?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_language_choice)

def select_level(message):
    language = message.text
    if language in materials:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        levels = materials[language].keys()
        for level in levels:
            markup.add(level)
        msg = bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –¥–ª—è –º–æ–≤–∏ {language}:", reply_markup=markup)
        bot.register_next_step_handler(msg, send_materials, language)
    else:
        bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

def send_materials(message, language):
    level = message.text
    if language in materials and level in materials[language]:
        file_path = materials[language][level]
        file_url = upload_to_google_drive(file_path)
        bot.send_message(message.chat.id, f"–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è {language} —Ä—ñ–≤–Ω—è {level}: {file_url}")
    else:
        bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏ —Ç–∞ —Ä—ñ–≤–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

def ask_for_fullname(message, language):
    msg = bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    bot.register_next_step_handler(msg, process_fullname, language)

def process_fullname(message, language):
    fullname = message.text.strip()
    if not all(x.isalpha() or x.isspace() for x in fullname):
        msg = bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ü–Ü–ë (—Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_fullname, language)
        return
    ask_for_phone(message, language, fullname)

def ask_for_phone(message, language, fullname):
    msg = bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(msg, process_phone, language, fullname)

def process_phone(message, language, fullname):
    phone = message.text.strip()
    if not re.match(r'^\+?1?\d{9,15}$', phone):
        msg = bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_phone, language, fullname)
        return
    ask_for_email(message, language, fullname, phone)

def ask_for_email(message, language, fullname, phone):
    msg = bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:")
    bot.register_next_step_handler(msg, process_email, language, fullname, phone)

def process_email(message, language, fullname, phone):
    email = message.text.strip()
    if not re.match(r'^\S+@\S+\.\S+$', email):
        msg = bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_email, language, fullname, phone)
        return
    registration_complete(message, language, fullname, phone, email)

def registration_complete(message, language, fullname, phone, email):
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {language}\n–ü–Ü–ë: {fullname}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {email}\nUser ID: {message.from_user.id}")
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —â–æ –π–æ–≥–æ –¥–∞–Ω—ñ –±—É–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –í–∞—à—ñ –¥–∞–Ω—ñ –±—É–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ.")
    logging.info(f"Registration completed for {fullname} with User ID: {message.from_user.id}")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.")

bot.polling()
